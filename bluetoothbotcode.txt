`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04.04.2024 22:38:51
// Design Name: 
// Module Name: main
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

`define stop 3'd0
`define forward 3'd1
`define left_forward 3'd2
`define right_forward 3'd3
`define backward 3'd4

module main(
    input clk, // clock from crystal
    input rst, // active high reset: (Switch-15)
    input SW0, // forward (Switch-0)
    input SW1, // backward (Switch-1)
    input SW2, // turn left (Switch-2)
    input SW3, // turn right (Switch-3)
    input RxD, // from bluetooth input signal (JC-4) 
	input echo, //from front US  (JA-7)
	input echo_left, //from left US (JC-7)
	input echo_right, //from right US (JC-9)
    output wire IN1, //Motor Control IN-1 (JB-1)
    output wire IN2, //Motor Control IN-2 (JB-2)
    output wire IN3, //Motor Control IN-3 (JB-3)
    output wire IN4, //Motor Control IN-4 (JB-4)
    output trigger, //to front US  (JA-8)
	output trigger_left,//to left US (JC-8)
	output trigger_right, //to right US (JC-10)
    output wire [3:0] led, //  led[3:0] = {forward_left (JA9),forward_right (JA10),back_left (JC1),back_right (JC2)}
    output wire [3:0] DIGIT,
    output wire [6:0] DISPLAY,
    output wire obstacle, //Buzzer(JC3)
    output wire obstacle_left, //LED-14
    output wire obstacle_right //LED-13
    );
   
    wire clkDiv13;
    wire [7:0] RxData;
    wire [3:0] BCD0, BCD1, BCD2, BCD3;
    reg [2:0] direction , next_direction;

    assign led = (direction==`stop) ? 4'b0000 :
                  (direction==`forward) ? 4'b1100 :
                  (direction==`left_forward) ? 4'b1000 :
                  (direction==`right_forward) ? 4'b0100 :
                  (direction==`backward) ? 4'b0011 : 4'b0000;
                  
    assign DIGIT = 4'b0111;       
    assign DISPLAY = (direction==`stop) ? 7'b0100100 :
                  (direction==`forward) ? 7'b0111000 :
                  (direction==`left_forward) ? 7'b1110001 :
                  (direction==`right_forward) ? 7'b0001000 :
                  (direction==`backward) ? 7'b1100000 : 7'b0100100;
	
    assign BCD0 = RxData%10;
    assign BCD1 = (RxData/10)%10;
    assign BCD2 = (RxData/100)%10;
    assign BCD3 = (RxData/1000)%10;
    
    clock_divider #(.n(13)) clock_13(
        .clk(clk),
        .clk_div(clkDiv13)
    );
    
    bluetooth_RX(
        .clk(clk), //input clock
        .reset(rst), //input reset 
        .RxD(RxD), //input receving data line
        .RxData(RxData)
	);
	
	wire clk_1Hz;
    oneHZ_generator a1(clk,clk_1Hz);
    
    motor_control(
        .direction(direction),
        .clk_1Hz(clk_1Hz),
        .obstacle(obstacle),
        .IN1(IN1),
        .IN2(IN2),
        .IN3(IN3),
        .IN4(IN4)
    );
    
//    seven_segment(
//        .rst(rst),
//        .clk(clkDiv13),
//        .BCD3(BCD3),
//        .BCD2(BCD2),
//        .BCD1(BCD1),
//        .BCD0(BCD0),
//        .DIGIT(DIGIT),
//        .DISPLAY(DISPLAY)
//    ); // show the value of RxData
    
	us_sensor(.echo(echo),.trigger(trigger),.obstacle(obstacle),.clk(clk));
	us_sensor(.echo(echo_left),.trigger(trigger_left),.obstacle(obstacle_left),.clk(clk));
	us_sensor(.echo(echo_right),.trigger(trigger_right),.obstacle(obstacle_right),.clk(clk));
	
    always@(posedge clk) begin
        if(rst)begin
            direction = `stop;
            
        end else begin
            if(obstacle && direction != `backward && direction != `stop) begin
		          if(obstacle_left) begin
			             if(obstacle_right)  direction =`stop;
			             else direction =`right_forward;
		          end
		          else direction =`left_forward;
	         end
             else direction =next_direction;
        end
    end
    
    always@*begin
        case(RxData)
            8'd51: next_direction=`left_forward;
            8'd49: next_direction=`forward;
            8'd52: next_direction=`right_forward;
            8'd50: next_direction=`backward;
            8'd48: next_direction=`stop;
            default:begin
                if(SW0==1 && SW1==0)begin
                    if(SW2==1 && SW3==0) next_direction=`left_forward;
                    else if(SW2==0 && SW3==1) next_direction=`right_forward;
                    else next_direction=`forward;
                end else if(SW0==0 && SW1==1)next_direction=`backward;
                    else next_direction=`stop;
            end
        endcase
    end
endmodule

module motor_control(
    input [2:0] direction,
    input clk_1Hz,
    input obstacle,
    output reg IN1,
    output reg IN2,
    output reg IN3,
    output reg IN4
    );
    reg [1:0] counter_up1;
    reg [1:0] counter_up2;
    always@ (posedge clk_1Hz)begin
        case(direction)
            `stop: begin {IN1,IN2,IN3,IN4} = 4'b0000; counter_up1 <= 1'b0; counter_up2 <= 1'b0; end
            `forward: begin {IN1,IN2,IN3,IN4} = 4'b1010; counter_up1 <= 1'b0; counter_up2 <= 1'b0; end
            `left_forward: begin counter_up2 <= 1'b0;
                                if(counter_up1 == 2'd1 && !obstacle) begin {IN1,IN2,IN3,IN4} = 4'b1010; end
                                else begin counter_up1 <= counter_up1 + 1'b1; 
                                           {IN1,IN2,IN3,IN4} = 4'b1000; 
                                     end
                           end
            `right_forward: begin counter_up1 <= 1'b0;
                                if(counter_up2 == 2'd1 && !obstacle) begin {IN1,IN2,IN3,IN4} = 4'b1010; end
                                else begin counter_up2 <= counter_up2 + 1'b1; 
                                           {IN1,IN2,IN3,IN4} = 4'b0010; 
                                     end
                           end
            `backward: begin {IN1,IN2,IN3,IN4} = 4'b0101; counter_up1 <= 1'b0; counter_up2 <= 1'b0; end
            default: begin {IN1,IN2,IN3,IN4} = 4'b0000; counter_up1 <= 1'b0; counter_up2 <= 1'b0; end
        endcase
    end
endmodule

//to receive data via UART (Universal Asynchronous Receiver Transmitter) protocol from a Bluetooth module and extract the rxd data
module bluetooth_RX(
	input clk, //input clock
	input reset, //input reset 
	input RxD, //input receving data line
	output [7:0] RxData // output for 8 bits data
	// output [7:0]LED // output 8 LEDs
    );
	//internal variables
	reg shift; // shift signal to trigger shifting data
	reg state, nextstate; // initial state and next state variable
	reg [3:0] bitcounter; // 4 bits counter to count up to 10 for UART receiving
	reg [1:0] samplecounter; // 2 bits sample counter to count up to 4 for oversampling
	reg [13:0] counter; // 14 bits counter to count the baud rate (9600bps)
	reg [9:0] rxshiftreg; //bit shifting register [8:1]->data bits
	reg clear_bitcounter,inc_bitcounter,inc_samplecounter,clear_samplecounter; //clear and increment the data bits counter and start bit finding counter

	// constants
	parameter clk_freq = 100_000_000;  // system clock frequency
	parameter baud_rate = 9_600; //baud rate
	parameter div_sample = 4; //oversampling       
	//Value to divide the system clock frequency to achieve a baud rate frequency.            
	parameter div_counter = clk_freq/(baud_rate*div_sample);  // this is the number we have to divide the system clock frequency to get a frequency (div_sample) time higher than (baud_rate)
	parameter mid_sample = (div_sample/2);  // this is the middle point of a bit where you want to sample it
	parameter div_bit = 10; // 1 start, 8 data, 1 stop (bits in the UART frame)


	assign RxData = rxshiftreg [8:1]; // assign the RxData from the shiftregister removing start and stop bits

	//UART receiver logic
	always @ (posedge clk)begin 
		if (reset)begin // if reset is pressed all counters are reset
			state <=0; // set state to idle 
			bitcounter <=0; // reset the bit counter
			counter <=0; // reset the counter
			samplecounter <=0; // reset the sample counter
		end else begin // if reset is not asserted
			counter <= counter +1; // start count in the counter
			if (counter >= div_counter-1) begin // if counter reach the baud rate with sampling 
				counter <=0; //reset the counter
				state <= nextstate; // assign the state to nextstate
				if (shift)rxshiftreg <= {RxD,rxshiftreg[9:1]}; //if shift asserted, load the receiving data to rxshiftreg
				if (clear_samplecounter) samplecounter <=0; // if clear sampl counter asserted, reset sample counter
				if (inc_samplecounter) samplecounter <= samplecounter +1; //if increment counter asserted, start sample count
				if (clear_bitcounter) bitcounter <=0; // if clear bit counter asserted, reset bit counter
				if (inc_bitcounter)bitcounter <= bitcounter +1; // if increment bit counter asserted, start count bit counter
			end
		end
	end
	   
	//state machine

	always @ (posedge clk) begin //trigger by clock
		shift <= 0; // set shift to 0 to avoid any shifting 
		clear_samplecounter <=0; // set clear sample counter to 0 to avoid reset
		inc_samplecounter <=0; // set increment sample counter to 0 to avoid any increment
		clear_bitcounter <=0; // set clear bit counter to 0 to avoid claring
		inc_bitcounter <=0; // set increment bit counter to avoid any count
		nextstate <=0; // set next state to be idle state
		case (state)
			0: begin // idle state
				if (RxD) begin// if input RxD data line asserted 
				    nextstate <=0; // back to idle state because RxD needs to be low to start transmission    
				end else begin // if input RxD data line is not asserted
					nextstate <=1; //jump to receiving state 
					clear_bitcounter <=1; // trigger to clear bit counter
					clear_samplecounter <=1; // trigger to clear sample counter
				end
			end
			
			//samples the input data at specific intervals (mid_sample and div_sample) to synchronize with the UART protocol.
			1: begin // receiving state
				nextstate <= 1; // DEFAULT 
				if (samplecounter== mid_sample - 1) 
				    shift <= 1; // if sample counter is 1, trigger shift 
				if (samplecounter== div_sample - 1) begin // if sample counter is 3 as the sample rate used is 4 times
					if (bitcounter == div_bit - 1) begin // check if bit counter if 9 or not
					    nextstate <= 0; // back to idle state if bit counter is 9 as receving is complete
					end 
					inc_bitcounter <=1; // trigger the increment bit counter if bit counter is not 9
					clear_samplecounter <=1; //trigger the sample counter to reset the sample counter
				end else 
				    inc_samplecounter <=1; // if sample is not equal to 3, keep counting
		        end
		    default: nextstate <=0; //default idle state
		endcase
	end         
endmodule

module clock_divider(clk, clk_div);   //dividing clk freq by 2^25
    parameter n = 26;     
    input clk;   
    output clk_div;   
    reg [n-1:0] num;
    wire [n-1:0] next_num;
    
    always@(posedge clk)begin
    	num<=next_num;
    end
    
    assign next_num = num +1;
    assign clk_div = num[n-1];  
endmodule

module seven_segment(
    input rst,
    input clk,
    input [3:0] BCD3,
    input [3:0] BCD2,
    input [3:0] BCD1,
    input [3:0] BCD0,
    output reg [3:0] DIGIT,
    output wire [6:0] DISPLAY
    );
    reg [3:0] value;

	always @ (posedge clk) begin	
		case(DIGIT) 
			4'b0111: begin
			    if(rst) value=0;
			    else value = BCD2;
				DIGIT <= 4'b1011;
			end
			4'b1011: begin
			    if(rst) value=0;
			    else value = BCD1;
				DIGIT <= 4'b1101;
			end
			4'b1101: begin
			    if(rst) value=0;
				else value = BCD0;
				DIGIT <= 4'b1110;
			end
			4'b1110: begin
			    if(rst) value=0;
				else value = BCD3;
				DIGIT <= 4'b0111;
			end
			default begin
				DIGIT <= 4'b1110;
			end
		endcase	
	end

	assign DISPLAY = (value==4'd0) ? 7'b0000001 :
					 (value==4'd1) ? 7'b1001111 :
					 (value==4'd2) ? 7'b0010010 :
					 (value==4'd3) ? 7'b0000110 :
					 (value==4'd4) ? 7'b1001100 :
					 (value==4'd5) ? 7'b0100100 :
					 (value==4'd6) ? 7'b0100000 :
					 (value==4'd7) ? 7'b0001111 :
					 (value==4'd8) ? 7'b0000000 : 
					 (value==4'd9) ? 7'b0000100 : 7'b1111111;
	
endmodule

module oneHZ_generator(clk,clk_1Hz);
input clk;
output clk_1Hz;
reg clk_out_reg=0;
reg [25:0] counter_reg=0;
always @(posedge clk)begin
    if(counter_reg==49_999_999)begin    //We will change the 1Hz clock state once we reached the alternate edge of 100MHz clock
        counter_reg<=0;
        clk_out_reg<= ~clk_out_reg;
    end
    else
        counter_reg<=counter_reg+1;
end
assign clk_1Hz=clk_out_reg;
endmodule

/*This module handles the timing of the ultrasonic sensor's trigger signal and 
measures the duration of the echo signal to calculate the distance of an obstacle.*/
module us_sensor(echo,trigger,obstacle,clk);
input clk,echo;
output reg trigger;
output obstacle;
reg [9:0] distance;	
reg nclk;	
reg [31:0] t_2c, t_3c, on_count, off_count, t_c, count;	
initial begin
	trigger=1; 
	count=0;
	t_c=0;
	t_2c=0;
	t_3c=0;
	on_count=1002;
	off_count=10000000;
end
sev_seg m1(clk,distance,obstacle);
always @(posedge clk) begin  //sending waves(pulses) at 40KHz
	if(trigger==1) begin
		count=count+1;
		if(count==on_count) begin
			count=0;
			trigger=0;
	   end
	end	
	else begin
		count=count+1;
		if(count==off_count) begin
			count=0;
			trigger=1;
	   end
	end	
end
	always
		distance=(t_3c*34)/200000;  //0.0017 initially when no echo
always @(posedge clk) begin
		if(echo==0) begin
			t_3c=t_2c+1;					//total pulses for echo=1
			t_c=0;							//make this counting variable 0 for next time counting purpose
		end	
		else if(echo==1)	begin            //detected the reflected sound wave.
			t_c=t_c+1;						//count pulses for echo =1 (time during echo = 1, is propotional to distance)  
			t_2c=t_c;						//save this count to one variable
		end
end		
endmodule
 
module sev_seg(clk,dist,obstacle
    );
input [9:0] dist;
input clk;
output reg obstacle;
reg nclk;
reg [1:0] segno; 
reg [31:0] count;
reg [3:0] cas;
reg [3:0] a,b,c; 
	initial begin
		nclk=0;
		count=0;  
	end
	always @(posedge clk) begin
		count=count+1;
		if(count==50000) begin
			nclk=~nclk;
			count=0;
		end	
	end
	always begin
		c=dist/100;
		b=(dist%100)/10;
		a=dist%10;
	end
	always @(posedge nclk) begin	
		segno=segno+1;	
		if(segno==3)
			segno=0;
		if((a < 15) & (b == 0) & (c == 0)) obstacle=1;
		else obstacle=0;
	end	
endmodule